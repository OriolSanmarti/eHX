/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}

// TO REFINE THE MESH NEAR THE SURFACES, INCREASE THE LEVEL ON refinementSurfaces

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       false;


// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    ehX_CFD.stl
    {
        type triSurfaceMesh;
        name outBox;
    }
    ehX_CFD.stl
    {
        type triSurfaceMesh;
        name resistance;
    }
/*
    outletRefinado
    {
        type    searchableBox;       // region defined by bounding box
        min     (0.03 0.29 0.05);
        max     (0.06 0.31 0.07);
    }

    inletRefinado1
    {
        type    searchableBox;       // region defined by bounding box
        min     (0.23 0.18 0.46);
        max     (0.25 0.21 0.48);
    }

    inletRefinado2
    {
        type    searchableBox;       // region defined by bounding box
        min     (0.23 0.23 0.46);
        max     (0.25 0.24 0.48);
    }

    inletRefinado3
    {
        type    searchableBox;       // region defined by bounding box
        min     (0.35 0.21 0.46);
        max     (0.37 0.25 0.48);
    }
    */
}


// Settings for the castellatedMesh generation.
castellatedMeshControls
{

    // Refinement parameters
    // ~~~~~~~~~~~~~~~~~~~~~

    // If local number of cells is >= maxLocalCells on any processor
    // switches from from refinement followed by balancing
    // (current method) to (weighted) balancing before refinement.
    maxLocalCells 100000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 6000000;

    // The surface refinement loop might spend lots of iterations
    // refining just a few cells. This setting will cause refinement
    // to stop if <= minimumRefine are selected for refinement. Note:
    // it will at least do one iteration (unless the number of cells
    // to refine is 0)
    minRefinementCells 10;

    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 2;



    // Explicit feature edge refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface for now.
    features
    (
        {
            //.stl name
            file "ehX_CFD.extendedFeatureEdgeMesh";    //"geom.eMesh";
//            file "tank.extendedFeatureEdgeMesh";    //"geom.eMesh";
            level 2;
        }
    );



    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.
    refinementSurfaces
    {
        resistance
        {
            //level (3 3);
            //level (2 2);
            level (2 2);
        }
        /*
        tank
        {
            level (2 2);
        }
        */
    }
    // Resolve sharp angles
    resolveFeatureAngle 30;

    refinementRegions
    {
        /*
      outletRefinado
      {
          mode inside;
          levels ((1.0 3));         // refinement level 4 (1.0 entry ignored)
      }

      inletRefinado1
      {
          mode inside;
          levels ((1.0 3));         // refinement level 4 (1.0 entry ignored)
      }

      inletRefinado2
      {
          mode inside;
          levels ((1.0 3));         // refinement level 4 (1.0 entry ignored)
      }

      inletRefinado3
      {
          mode inside;
          levels ((1.0 3));         // refinement level 4 (1.0 entry ignored)
      }
      */
        //refinementBox
        //{
        //    mode inside;
        //    levels ((1E15 4));
        //}
    }


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationsInMesh
    (
/*
        (( 0.1 0.1 0.1) outBox)
        */
        //(( 0 0.0 0.10) tank)
        
        (( 0.0 0.00 0.050 ) outBox)
        //(( 0.0 0.05 0.200 ) resistance)
        
    );


    // Whether any faceZones (as specified in the refinementSurfaces)
    // are only on the boundary of corresponding cellZones or also allow
    // free-standing zone faces. Not used if there are no faceZones.
    allowFreeStandingZoneFaces false;
    snap true;
}



// Settings for the snapping.
snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface
    nSmoothPatch 3;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length.
    tolerance 1; //jordiv

    //- Number of mesh displacement relaxation iterations.
    nSolveIter 30;

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter 5;

    //- Highly experimental and wip: number of feature edge snapping
    //  iterations. Leave out altogether to disable.
    //  Of limited use in this case since faceZone faces not handled.
    nFeatureSnapIter 10;
}



// Settings for the layer addition.
addLayersControls
{
    relativeSizes false;
    
    layers
    {
        resistance_to_outBox
        {
        nSurfaceLayers 4;   // Change this value to the desired number of layers
        //expansionRatio 1.15;
        //firstLayerThickness  0.25E-3;
    //    finalLayerThickness 0.58E-3;
        }
        outBox_to_resistance
        {
        nSurfaceLayers 4;   // Change this value to the desired number of layers
     //   finalLayerThickness 0.58E-3;
        }
    }
        expansionRatio 1.15;
    firstLayerThickness  0.25E-3;
    minThickness 0.25E-3;

    // 0.1*1.15^10
    nGrow 0;
    featureAngle 90;
    nRelaxIter 3;
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 1000;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 1.7.x! 90 degrees corresponds to 130
    // in 1.7.x.
    minMedialAxisAngle 90;


    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;


    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter 50;
    
}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    #include "meshQualityDict"

    // Advanced

    //- Number of error distribution iterations
    nSmoothScale 4;
    //- Amount to scale back displacement at error points
    errorReduction 0.75;
}


// Advanced

// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;


// ************************************************************************* //
